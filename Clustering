import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

def euclDistance(vector1, vector2):
    return np.sqrt(sum((vector2 - vector1) ** 2))
def initCentroids(data, k):
    numSamples, dim = data.shape
    centroids = np.zeros((k, dim))
    for i in range(k):
        index = int(np.random.uniform(0, numSamples))
        centroids[i, :] = data[index, :]
    return centroids
def kmeans(data, k):
    numSamples = data.shape[0]
    clusterData = np.array(np.zeros((numSamples, 2)))
    clusterChanged = True
    centroids = initCentroids(data, k)
    while clusterChanged:
        clusterChanged = False
        for i in range(numSamples):
            minDist = 100000.0
            minIndex = 0
            for j in range(k):
                distance = euclDistance(centroids[j, :], data[i, :])
                if distance < minDist:
                    minDist = distance
                    clusterData[i, 1] = minDist
                    minIndex = j
            if clusterData[i, 0] != minIndex:
                clusterChanged = True
                clusterData[i, 0] = minIndex
        for j in range(k):
            cluster_index = np.nonzero(clusterData[:, 0] == j)
            pointsInCluster = data[cluster_index]
            centroids[j, :] = np.mean(pointsInCluster, axis=0)
    return centroids, clusterData

def showCluster(data, k, centroids, clusterData):
    numSamples, dim = data.shape
    if dim != 2:
        print('dimension of your data is not 2!')
        return 1
    mark = ['or', 'ob', 'og', 'ok', '^r', '+r', 'dr', '<r', 'pr']
    if k > len(mark):
        print('your k is too large!')
        return 1
    for i in range(numSamples):
        markIndex = int(clusterData[i, 0])
        plt.plot(data[i, 0], data[i, 1], mark[markIndex])
    mark = ['*r', '*b', '*g', '*k', '^b', '+b', 'sb', 'db', '<b', 'pb']
    for i in range(k):
        plt.plot(centroids[i, 0], centroids[i, 1], mark[i], markersize=20)
    plt.show()
    
if __name__ == '__main__':
    k = 4
    test = np.load('./SageDy_emb/default_embs_email_uci_8.npz',encoding="latin1")
    embs = test['data']
    print(embs.shape)
    tsne = TSNE(n_components=2, init='pca', random_state=0)
    result = tsne.fit_transform(embs)
    data = result
    x_min, x_max = np.min(data, 0), np.max(data, 0)
    data = (data - x_min) / (x_max - x_min)
    centroids, clusterData = kmeans(data, k)
    print(centroids)
    print(clusterData.shape)
    sum_loss = 0
    for d in clusterData:
        sum_loss = sum_loss + d[1]
    print(sum_loss)
    if np.isnan(centroids).any():
        print('Error')
    else:
        print('cluster complete!')
    showCluster(data, k, centroids, clusterData)


